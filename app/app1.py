import streamlit as st
import pandas as pd
import base64
import numpy as np
import io
from datetime import datetime, timedelta
from pulp import LpProblem, LpMaximize, LpVariable, lpSum, LpStatus, value, LpBinary, PULP_CBC_CMD
import streamlit.components.v1 as components
import plotly.express as px
import plotly.graph_objects as go

# -------------------------------
# Configuraci√≥n general de la p√°gina
# -------------------------------
# Aqu√≠ establezco el t√≠tulo y la disposici√≥n de la p√°gina de mi app para que tenga un dise√±o ancho y profesional
st.set_page_config(page_title="AgroSmart Decisions", layout="wide")

# -------------------------------
# CSS personalizado para sidebar y expanders
# -------------------------------
# Defino estilos para que el sidebar y las secciones desplegables tengan un aspecto verde y limpio, acorde a la tem√°tica agr√≠cola
custom_styles = """
<style>
[data-testid="stSidebar"] > div:first-child {
    background-color: #AABFA4;
    padding: 2rem 1rem 1rem 1rem;
}
.sidebar-logo {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 1.5rem;
}
.sidebar-logo img {
    max-width: 280px;
    height: auto;
}
div[data-testid="stExpander"] {
    border: 2px solid #AABFA4;
    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 1em;
}
div[data-testid="stExpander"] > details > summary {
    background-color: #AABFA4 !important;
    color: black !important;
    font-weight: bold;
    padding: 0.75em 1em;
    font-size: 1.05em;
}
div[data-testid="stExpander"] > details > div {
    background-color: #f1f7ef !important;
    padding: 1em;
}
</style>
"""
# Aplico estos estilos a la app
st.markdown(custom_styles, unsafe_allow_html=True)

# -------------------------------
# Funci√≥n para mostrar el logo en el sidebar
# -------------------------------
# Uso esta funci√≥n para mostrar un logo codificado en base64, para que el sidebar tenga identidad visual consistente
def mostrar_logo_sidebar(ruta):
    with open(ruta, "rb") as f:
        imagen_base64 = base64.b64encode(f.read()).decode()
    logo_html = f"""
    <div class='sidebar-logo'>
        <img src="data:image/png;base64,{imagen_base64}" 
             alt="Logo AgroSmart"
             style="max-width: 180px; height: auto;">
    </div>
    """
    st.sidebar.markdown(logo_html, unsafe_allow_html=True)

mostrar_logo_sidebar("images/solo_logo1.png")

# -------------------------------
# Cargar equivalencias de provincias y zonas clim√°ticas
# -------------------------------
# Intento cargar un archivo CSV para mapear provincias a zonas clim√°ticas equivalentes.
# Esto me permite ajustar recomendaciones seg√∫n condiciones regionales reales.
try:
    equivalencias = pd.read_csv("agro/data/equivalencias_provincias_clima.csv")
    equivalencias.columns = equivalencias.columns.str.strip()
    provincias_disponibles = sorted(equivalencias["Provincia_usuario"].dropna().unique().tolist())
    provincia_equivalencias = dict(zip(equivalencias["Provincia_usuario"].str.strip(), equivalencias["Provincia_equivalente"].str.strip()))
    provincia_zonaclimatica = dict(zip(equivalencias["Provincia_usuario"].str.strip(), equivalencias["Zona_climatica"].str.strip().str.lower()))
except Exception as e:
    # En caso de fallo, asigno valores por defecto para evitar que la app falle
    provincias_disponibles = ["Navarra", "Murcia", "Lleida"]
    provincia_equivalencias = {prov: prov for prov in provincias_disponibles}
    provincia_zonaclimatica = {prov: "mediterraneo" for prov in provincias_disponibles}
    st.warning(f"‚ö†Ô∏è No se pudo cargar el archivo de equivalencias. Usando valores por defecto. Detalle: {e}")

# -------------------------------
# Men√∫ lateral para navegaci√≥n
# -------------------------------
# Permito al usuario elegir entre Inicio, Acerca de y el formulario agr√≠cola
menu = st.sidebar.radio("Navegacion", ["Inicio", "Acerca de", "Formulario Agricola Usuario"])

# -------------------------------
# Mostrar logo principal centrado
# -------------------------------
# Aqu√≠ muestro el logo grande en la parte superior central de la app para dar identidad visual
with open("images/logo_transp_verde.png", "rb") as f:
    logo_base64 = base64.b64encode(f.read()).decode()

st.markdown(f"""
    <div style='
        display: flex;
        justify-content: center;
        align-items: center;
        height: 240px;
        margin-top: -4rem;
        margin-bottom: 0.5rem;
    '>
        <img src="data:image/png;base64,{logo_base64}"
             alt="AgroSmart Decisions"
             style="max-width: 500px; height: auto;">
    </div>
""", unsafe_allow_html=True)

# -------------------------------
# Contenido din√°mico seg√∫n men√∫
# -------------------------------
if menu == "Inicio":
    st.subheader("üå± ¬°Bienvenido agricultor del futuro!")
    st.write("Selecciona una secci√≥n en el men√∫ lateral para:")

    # Funci√≥n para mostrar la imagen portada con marco verde y sombra elegante
    def mostrar_imagen_con_marco_verde(ruta_imagen, caption=""):
        with open(ruta_imagen, "rb") as f:
            img_bytes = f.read()
            encoded = base64.b64encode(img_bytes).decode()

        st.markdown(f"""
        <div style="padding: 1rem; background-color: #AABFA4; border-radius: 16px;
                    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
                    text-align: center; margin-top: 2rem; margin-bottom: 2rem;">
            <img src="data:image/png;base64,{encoded}" style="max-width: 100%; height: auto; border-radius: 8px;">
            <p style="color: #ffffff; font-size: 1.1em; margin-top: 0.5rem;">{caption}</p>
        </div>
        """, unsafe_allow_html=True)

    # ‚úÖ LLAMADA CORRECTA FUERA DE LA FUNCI√ìN
    mostrar_imagen_con_marco_verde("images/PORTADA_AGRO.PNG", caption="Cultivos en campo abierto")

# ==============================  # =============================== 
elif menu == "Acerca de":
    st.subheader("üìò Sobre AgroSmart Decisions")
    # Aqu√≠ explico en detalle qu√© es el proyecto, sus funcionalidades y valores
    st.markdown("""
    <p style='font-size: 1.1em;'>
        <strong>AgroSmart Decisions</strong> es una herramienta innovadora desarrollada con el objetivo de empoderar a agricultores, t√©cnicos y cooperativas a trav√©s del an√°lisis inteligente de datos. 
        En un contexto marcado por el cambio clim√°tico, la escasez de recursos y la necesidad de producir de manera m√°s eficiente, AgroSmart ofrece un enfoque pr√°ctico y accesible para la toma de decisiones agr√≠colas.
    </p>

    <p style='font-size: 1.1em;'>
        Esta aplicaci√≥n integra informaci√≥n real y actualizada sobre condiciones clim√°ticas, caracter√≠sticas del suelo, demanda del mercado y disponibilidad de recursos como el agua y la maquinaria. 
        A trav√©s de algoritmos de optimizaci√≥n y an√°lisis de datos, permite a los usuarios recibir recomendaciones de cultivo personalizadas y basadas en evidencia.
    </p>

    <ul style='padding-left: 1.2em; font-size: 1.05em;'>
        <li>üìä <strong>An√°lisis y procesamiento de datos agr√≠colas</strong></li>
        <li>üåæ <strong>Recomendaciones personalizadas seg√∫n condiciones reales</strong></li>
        <li>üíß <strong>Optimizaci√≥n del uso del agua y recursos</strong></li>
        <li>üß† <strong>Modelos inteligentes para maximizar beneficios</strong></li>
        <li>üì• <strong>Exportaci√≥n de informes personalizables</strong></li>
    </ul>

    <p style='font-size: 1.05em;'>
        AgroSmart Decisions nace como un proyecto acad√©mico con vocaci√≥n real. Su dise√±o modular y escalable permite integrarlo en m√∫ltiples contextos regionales o productivos.
    </p>

    <hr style='border: 1px solid #AABFA4; margin-top: 2em; margin-bottom: 1em;'>

    <h4 style='color: #4E5B48;'>üì¨ Contacto</h4>
    <p style='font-size: 1em;'>
        ¬øTienes dudas, sugerencias o deseas colaborar?<br>
        Puedes escribirme a: <strong>c.roman.monje@gmail.com</strong><br>
        Tambi√©n puedes seguir el proyecto en 
        <a href='https://github.com/CarlosRomanM/CarlosRomanM' target='_blank' style='color:#4E5B48; text-decoration: underline;'>GitHub</a>
    </p>
    """, unsafe_allow_html=True)

# ===============================  # =============================== 
if menu == "Formulario Agricola Usuario":
    st.subheader("Formulario del Usuario Agr√≠cola")
    st.markdown("Introduce los siguientes datos para generar recomendaciones:")

    # Pedir superficie y opci√≥n de cultivo
    with st.expander("üìè Superficie y tipo de cultivo", expanded=True):
        superficie_ha = st.number_input(
            "Superficie total (ha)",
            min_value=0.1,
            max_value=10.0,
            step=0.1,
            value=0.5
        )
        cultivo_unico = st.radio("¬øPreferencia por monocultivo o multicultivo?", ["Monocultivo", "Multicultivo"])

    # Condiciones de agua
    with st.expander("üö∞ Condiciones de agua", expanded=True):
        acceso_agua = st.selectbox("Acceso a agua", ["bajo", "medio", "alto"])

    # Ubicaci√≥n y tipo de suelo
    with st.expander("üìç Ubicaci√≥n y suelo", expanded=True):
        provincia = st.selectbox("Provincia", provincias_disponibles)
        provincia_equiv = provincia_equivalencias.get(provincia)
        tipo_suelo = st.selectbox("Tipo de suelo", ["franco", "arcilloso", "arenoso", "franco-arcilloso", "franco-arenoso"])

    # Opci√≥n para permitir recomendaciones fuera de zona clim√°tica
    modo_flexible = st.checkbox("¬øPermitir recomendaciones fuera de tu zona clim√°tica?", value=False)
    zona_climatica = provincia_zonaclimatica.get(provincia, "mediterraneo")

    # Bot√≥n para generar recomendaciones
    if st.button("Generar recomendaciones"):
        st.session_state["recomendaciones_generadas"] = True
        st.success("Datos guardados correctamente. Recomendaciones disponibles m√°s abajo.")

    if st.session_state.get("recomendaciones_generadas"):

        # Muestro resumen de datos de usuario
        st.markdown(f"""
        <div style='
            border: 2px solid #AABFA4;
            border-radius: 12px;
            padding: 1.5em;
            background-color: #f9fdf7;
            margin-bottom: 1.5em;'>
            <h4 style='color: #4E5B48;'>üåø Par√°metros del usuario</h4>
            <ul style='list-style-type: none; padding-left: 0; font-size: 1.1em;'>
                <li><strong>Provincia:</strong> {provincia}</li>
                <li><strong>Tipo de suelo:</strong> {tipo_suelo}</li>
                <li><strong>Superficie:</strong> {superficie_ha} ha</li>
                <li><strong>Opci√≥n de cultivo:</strong> {cultivo_unico}</li>
                <li><strong>Zona clim√°tica:</strong> {zona_climatica}</li>
                <li><strong>Filtro clim√°tico flexible:</strong> {'S√≠' if modo_flexible else 'No'}</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

        # Cargo los datasets base
        cultivos_df = pd.read_csv("agro/data/cultivos_hortalizas_final.csv")
        demanda_df = pd.read_csv("agro/data/demanda_clientes.csv")
        terreno_df = pd.read_csv("agro/data/terreno_suelo_final.csv")

        # Calculo rendimiento por metro cuadrado para c√°lculos posteriores
        cultivos_df["Rendimiento_kg_m2"] = cultivos_df["Rendimiento_promedio (kg/ha)"].fillna(0) / 10000

        # Flag para modo debug (mensajes t√©cnicos)
        modo_debug = False


  # ===============================  # ===============================  # ===============================  # ===============================
        
        if cultivo_unico == "Multicultivo":
            # Importo la funci√≥n principal que ejecuta el modelo de optimizaci√≥n para multicultivo
            from app.multicultivo_module import ejecutar_modelo_multicultivo
            
            # Ejecuto el modelo pasando todos los datos relevantes y condiciones del usuario
            # El modelo me devuelve un DataFrame con resultados, el estado de la optimizaci√≥n y el beneficio total
            df_resultados, estado, beneficio = ejecutar_modelo_multicultivo(
                cultivos_df, demanda_df, terreno_df,
                superficie_ha, tipo_suelo, acceso_agua,
                provincia_equiv, zona_climatica,
                modo_flexible,
                debug=modo_debug  # Pasa flag para activar mensajes t√©cnicos en modo debug
            )
            
            # Verifico si obtuve resultados v√°lidos; si no, aviso al usuario que no hay cultivos que cumplan las condiciones
            if df_resultados is None or df_resultados.empty:
                st.warning("‚ö†Ô∏è No hay cultivos que coincidan con tus condiciones actuales o el modelo no encontr√≥ soluci√≥n √≥ptima.")
            else:
                # Si estoy en modo debug, muestro informaci√≥n t√©cnica sobre la ejecuci√≥n y resultados
                if modo_debug:
                    st.markdown("üîç Iniciando modelo multicultivo...")
                    st.markdown(f"üå¶Ô∏è Zona clim√°tica asignada: {zona_climatica}")
                    st.markdown(f"üíß Nivel de agua del usuario: {acceso_agua}")
                    st.markdown(f"üìå Estado del modelo: {estado}")
                    st.markdown(f"üí∞ Beneficio total anual optimizado: ‚Ç¨ {beneficio:,.2f}")
                
                # Preparaci√≥n para mostrar el calendario anual de siembra y cosecha
                st.markdown("### üóìÔ∏è Calendario estimado anual de siembra y cosecha")
                
                # Normalizo nombres de cultivos en ambos DataFrames para asegurar coincidencias
                cultivos_df["Nombre_cultivo"] = cultivos_df["Nombre_cultivo"].str.strip().str.lower()
                df_resultados["Cultivo"] = df_resultados["Cultivo"].str.strip().str.lower()
                
                # Obtengo la duraci√≥n en d√≠as de cada cultivo desde cultivos_df y la asigno a df_resultados
                df_duracion = cultivos_df.set_index("Nombre_cultivo")["Duraci√≥n_cultivo_d√≠as"].to_dict()
                df_resultados["Duracion_dias"] = df_resultados["Cultivo"].map(df_duracion)
                
                # Funci√≥n para estimar fecha de inicio a partir del mes (usando a√±o fijo 2025)
                def estimar_inicio(mes):
                    try:
                        return datetime(2025, int(mes), 1)
                    except:
                        return pd.NaT
                
                # Calculo fechas de inicio y fin del ciclo para cada cultivo y mes
                df_resultados["Inicio"] = df_resultados["Mes"].apply(estimar_inicio)
                df_resultados["Fin"] = df_resultados.apply(
                    lambda row: row["Inicio"] + timedelta(days=int(row["Duracion_dias"])) if pd.notnull(row["Inicio"]) else pd.NaT,
                    axis=1
                )
                
                # Preparo el DataFrame para mostrar calendario, ordenando y limpiando datos
                calendario_multi = df_resultados.dropna(subset=["Inicio", "Fin"])[["Cultivo", "Inicio", "Fin"]].copy()
                calendario_multi["Cultivo"] = calendario_multi["Cultivo"].str.capitalize()
                calendario_multi = calendario_multi.sort_values("Inicio")
                
                # Si hay datos para mostrar, genero el gr√°fico timeline con Plotly
                if not calendario_multi.empty:
                    fig2 = px.timeline(
                        calendario_multi,
                        x_start="Inicio",
                        x_end="Fin",
                        y="Cultivo",
                        color="Cultivo",
                        title="Calendario anual Multicultivo"
                    )
                    fig2.update_yaxes(autorange="reversed")
                    fig2.update_layout(height=420, margin=dict(l=0, r=0, t=50, b=0))
                    st.plotly_chart(fig2, use_container_width=True)
                    
                    # Tambi√©n muestro la tabla con fechas en formato legible (dd/mm)
                    calendario_mostrar = calendario_multi.copy()
                    calendario_mostrar["Inicio"] = calendario_mostrar["Inicio"].dt.strftime("%d/%m")
                    calendario_mostrar["Fin"] = calendario_mostrar["Fin"].dt.strftime("%d/%m")
                    
                    st.markdown("### üìÖ Fechas de siembra y cosecha ", unsafe_allow_html=True)
                    st.markdown("#####  Recomendaci√≥n de fechas v√°lidas ", unsafe_allow_html=True)
                    st.markdown("""
                        <style>
                        thead tr th {
                            background-color: #AABFA4;
                            color: #1e1e1e;
                            font-weight: bold;
                            text-align: center;
                        }
                        tbody tr td {
                            text-align: center;
                        }
                        </style>
                    """, unsafe_allow_html=True)
                    st.dataframe(calendario_mostrar, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è No se pudieron estimar fechas para los cultivos seleccionados.")
                
                # Visualizaci√≥n del uso del terreno con un treemap para entender la distribuci√≥n por cultivo
                st.markdown("### üåæ Visualizaci√≥n de uso del terreno por cultivo")
                superficie_por_cultivo = df_resultados.groupby("Cultivo")["Superficie_ha"].sum().reset_index()
                superficie_por_cultivo["Cultivo"] = superficie_por_cultivo["Cultivo"].str.capitalize()
                
                fig_treemap = px.treemap(
                    superficie_por_cultivo,
                    path=["Cultivo"],
                    values="Superficie_ha",
                    color="Superficie_ha",
                    color_continuous_scale="Greens",
                    title="üß≠ Distribuci√≥n de la superficie total por cultivo."
                )
                fig_treemap.update_traces(textinfo="label+value+percent entry")
                fig_treemap.update_layout(margin=dict(t=50, l=10, r=10, b=10))
                st.plotly_chart(fig_treemap, use_container_width=True, key="grafico_treemap")
                
                # Calculo estimado del n√∫mero de plantas por cultivo para dimensionar recursos
                unidades_dict = cultivos_df.set_index("Nombre_cultivo")["Unidades_m2"].to_dict()
                df_resultados["Unidades_m2"] = df_resultados["Cultivo"].map(unidades_dict)
                df_resultados["Plantas estimadas"] = (df_resultados["Superficie_ha"] * 10000 * df_resultados["Unidades_m2"]).fillna(0).astype(int)
                
                # Agrupo datos para crear un resumen con producci√≥n, beneficio, superficie, duraci√≥n y plantas estimadas
                resumen = df_resultados.groupby("Cultivo").agg(
                    Total_kg=("Cantidad_kg", "sum"),
                    Total_beneficio=("Beneficio_‚Ç¨", "sum"),
                    Total_superficie_ha=("Superficie_ha", "sum"),
                    Duracion_dias=("Duracion_dias", "mean"),
                    Plantas_estimadas=("Plantas estimadas", "sum")
                ).reset_index()
                
                # Presento recomendaciones visuales para cada cultivo en forma de tarjetas
                st.markdown("### ü™¥ Resultados personalizados por cultivo")
                st.markdown("#####  üéã Tarjetas de cultivo ")
                
                # Diccionario de emojis para darle personalidad visual a cada cultivo
                iconos_por_cultivo = {
                    "Tomate": "üçÖ", "Lechuga": "ü•¨", "Zanahoria": "ü•ï", "Cebolla": "üßÖ", "Ajo": "üßÑ", "Pimiento": "üå∂Ô∏è",
                    "Pepino": "ü•í", "Calabac√≠n": "ü•í", "Berenjena": "üçÜ", "Espinaca": "ü•¨", "Repollo": "ü•¨", "Br√≥coli": "ü•¶",
                    "Coliflor": "ü•¶", "Alcachofa": "ü•¨", "Guisante": "üå±", "Habas": "üå±", "Nabo": "üå∞", "R√°bano": "üå∞",
                    "Apio": "ü•¨", "Remolacha": "ü´í", "Jud√≠a verde": "üåø", "Escarola": "ü•¨", "Endivia": "ü•¨", "Acelga": "ü•¨",
                    "Col rizada": "ü•¨", "Pepinillo": "ü•í", "Puerro": "üßÖ", "Bledo": "üåø", "Mostaza verde": "üåø", "Berro": "üåø",
                    "Acelga de verano": "ü•¨", "Achicoria": "ü•¨", "Berza": "ü•¨", "Can√≥nigos": "ü•¨", "Cardo": "üåø",
                    "Coles de Bruselas": "ü•¨", "Mizuna": "üåø", "Pak Choi": "ü•¨", "R√∫cula": "üåø"
                }
                
                # Identifico el cultivo m√°s rentable para destacarlo con una estrella
                cultivo_top = resumen.loc[resumen["Total_beneficio"].idxmax(), "Cultivo"]
                
                # Organizo las tarjetas en filas de 4 columnas para una presentaci√≥n ordenada
                n_col = 4
                filas = [resumen[i:i + n_col] for i in range(0, resumen.shape[0], n_col)]
                
                # Itero cada fila y cada cultivo para construir las tarjetas con datos relevantes
                for fila in filas:
                    cols = st.columns(len(fila))
                    for i, (_, row) in enumerate(fila.iterrows()):
                        cultivo = row["Cultivo"].capitalize()
                        icono = iconos_por_cultivo.get(cultivo, "üåø")
                        estrella = " ‚≠ê" if cultivo == cultivo_top else ""
                        duracion = int(row["Duracion_dias"]) if not pd.isna(row["Duracion_dias"]) else 90
                        ciclos = int(365 / duracion)
                        produccion_mensual = row["Total_kg"] / 12
                        beneficio_mensual = row["Total_beneficio"] / 12
                        plantas = row.get("Plantas_estimadas", 0)
                        
                        # Construyo la tarjeta en HTML con estilos para mostrar la informaci√≥n detallada
                        with cols[i]:
                            st.markdown(f"""
                            <div style="background-color: #B0C8B4; border: 3px solid #2f4030; border-radius: 16px; padding: 1.2rem; color: white; text-align: center;
                                        box-shadow: 1px 1px 6px rgba(0,0,0,0.1); height: 660px; font-family: 'Segoe UI', sans-serif;">
                            <div style='font-size: 1.2rem;'>{icono}{estrella}</div>
                            <h4 style="margin: 0.5rem 0 0.8rem;">{cultivo}</h4>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Duraci√≥n del ciclo</p>
                                <p>{duracion} d√≠as</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Ciclos por a√±o</p>
                                <p>{ciclos}</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Plantas estimadas</p>
                                <p>{plantas:,} unidades</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Producci√≥n mensual</p>
                                <p>{produccion_mensual:,.0f} kg</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Producci√≥n total</p>
                                <p>{row['Total_kg']:,.0f} kg</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Beneficio mensual</p>
                                <p>‚Ç¨ {beneficio_mensual:,.2f}</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Beneficio Anual</p>
                                <p>‚Ç¨ {row['Total_beneficio']:,.2f}</p>
                            </div>
                            </div>
                            """, unsafe_allow_html=True)
                    st.markdown("<br>", unsafe_allow_html=True)
                
                # Muestro un DataFrame con el resumen de datos para consulta tabular
                st.markdown("### üìä Datos Obtenidos por cultivo")
                st.dataframe(resumen, use_container_width=True)
                
                # Muestro una gr√°fica de barras para comparar producci√≥n y beneficio entre cultivos
                st.markdown("### üìä Comparativa visual por cultivo")
                resumen_melted = resumen.melt(id_vars="Cultivo", value_vars=["Total_kg", "Total_beneficio"])
                fig_resumen = px.bar(
                    resumen_melted,
                    x="Cultivo",
                    y="value",
                    color="variable",
                    barmode="group",
                    title="Representaci√≥n por cultivo"
                )
                fig_resumen.update_layout(xaxis_title="Cultivo", yaxis_title="Valor", height=420)
                st.plotly_chart(fig_resumen, use_container_width=True)
                
                # Preparo y ofrezco descarga del resultado completo en un archivo Excel con timestamp
                output = io.BytesIO()
                nombre_archivo = f"recomendacion_multicultivo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
                    df_resultados.to_excel(writer, index=False, sheet_name="Multicultivo")
                st.download_button(
                    label="üóìÔ∏è Descargar resultados en Excel",
                    data=output.getvalue(),
                    file_name=nombre_archivo,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
                # Finalmente, muestro un recuadro con el beneficio total optimizado para que el usuario lo tenga presente
                st.markdown(f"""
                <div style='
                    background-color: #DCEFD9;
                    border: 2px solid #37572F;
                    border-radius: 10px;
                    padding: 1.2rem;
                    text-align: center;
                    font-size: 1.4em;
                    font-weight: bold;
                    color: #2f4030;
                    box-shadow: 1px 2px 6px rgba(0,0,0,0.1);'>
                üí∞ Beneficio total anual optimizado: ‚Ç¨ {beneficio:,.2f}
                </div>
                """, unsafe_allow_html=True)



 # =============================== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====                

        elif cultivo_unico == "Monocultivo":
            # Importo la funci√≥n principal que genera las propuestas de cultivo para monocultivo
            from app.monocultivo_module import generar_propuestas_monocultivo
            
            # Ejecuto la funci√≥n con los datos de cultivos, demanda, terreno y superficie del usuario
            df_monocultivo = generar_propuestas_monocultivo(
                cultivos_df, demanda_df, terreno_df, superficie_ha
            )
            
            # Muestro un t√≠tulo para la secci√≥n de propuestas de monocultivo m√°s rentables
            st.markdown("## üåæ Propuestas de monocultivo m√°s rentables")
            
            # Si no se obtienen resultados v√°lidos, aviso al usuario con una advertencia
            if df_monocultivo is None or df_monocultivo.empty:
                st.warning("‚ö†Ô∏è No se encontraron cultivos v√°lidos para monocultivo con las condiciones actuales.")
            else:
                # Normalizo los nombres de cultivos para evitar errores por diferencias de tildes o may√∫sculas/min√∫sculas
                import unicodedata
                def quitar_tildes(texto):
                    if isinstance(texto, str):
                        # Utilizo unicodedata para eliminar tildes y otros acentos
                        return ''.join(c for c in unicodedata.normalize('NFD', texto) if unicodedata.category(c) != 'Mn')
                    return texto
                
                cultivos_df["Nombre_cultivo"] = cultivos_df["Nombre_cultivo"].str.strip().str.lower().apply(quitar_tildes)
                df_monocultivo["Cultivo"] = df_monocultivo["Cultivo"].str.strip().str.lower().apply(quitar_tildes)
                
                # Compruebo si el DataFrame tiene la columna de duraci√≥n del ciclo y, si no, la agrego
                if "Duraci√≥n del ciclo (d√≠as)" not in df_monocultivo.columns:
                    if "Duraci√≥n_cultivo_d√≠as" in cultivos_df.columns:
                        duraciones = cultivos_df.set_index("Nombre_cultivo")["Duraci√≥n_cultivo_d√≠as"].to_dict()
                        df_monocultivo["Duraci√≥n del ciclo (d√≠as)"] = df_monocultivo["Cultivo"].map(duraciones)
                    else:
                        # Si no encuentro la columna, asigno 90 d√≠as como valor por defecto y aviso
                        st.warning("‚ö†Ô∏è No se encontr√≥ la columna 'Duraci√≥n_cultivo_d√≠as'. Se usar√° 90 d√≠as por defecto.")
                        df_monocultivo["Duraci√≥n del ciclo (d√≠as)"] = 90
                    
                    # Calculo m√©tricas derivadas √∫tiles para an√°lisis y visualizaci√≥n
                    df_monocultivo["Ciclos por a√±o"] = (365 / df_monocultivo["Duraci√≥n del ciclo (d√≠as)"]).apply(np.floor).astype(int)
                    df_monocultivo["Producci√≥n total anual (kg)"] = df_monocultivo["Producci√≥n (kg)"] * df_monocultivo["Ciclos por a√±o"]
                    df_monocultivo["Beneficio total anual (‚Ç¨)"] = df_monocultivo["Beneficio estimado (‚Ç¨)"] * df_monocultivo["Ciclos por a√±o"]
                    df_monocultivo["Producci√≥n mensual promedio (kg)"] = df_monocultivo["Producci√≥n total anual (kg)"] / 12
                    df_monocultivo["Beneficio mensual promedio (‚Ç¨)"] = df_monocultivo["Beneficio total anual (‚Ç¨)"] / 12
                
                # Calculo el n√∫mero estimado de plantas a partir de las unidades por metro cuadrado y superficie
                if "Unidades_m2" in cultivos_df.columns:
                    unidades_dict = cultivos_df.set_index("Nombre_cultivo")["Unidades_m2"].to_dict()
                    df_monocultivo["Unidades_m2"] = df_monocultivo["Cultivo"].map(unidades_dict)
                    df_monocultivo["Plantas estimadas"] = (df_monocultivo["Superficie (ha)"] * 10000 * df_monocultivo["Unidades_m2"]).astype(int)
                else:
                    # Si no encuentro la columna necesaria, aviso y asigno cero a plantas estimadas
                    st.warning("‚ö†Ô∏è No se encontr√≥ la columna 'Unidades_m2'. No se puede calcular plantas estimadas.")
                    df_monocultivo["Plantas estimadas"] = 0
                
                # =======================
                # Construcci√≥n del calendario visual para monocultivo
                # =======================
                st.markdown("### üìÖ Fechas de siembra y cosecha")
                
                # Funci√≥n auxiliar para convertir fechas en texto a objetos datetime con a√±o base fijo
                def convertir_fecha(fecha_texto, a√±o_base=2025):
                    try:
                        if isinstance(fecha_texto, str):
                            fecha_texto = fecha_texto.strip().replace("/", "-")
                            dia, mes = map(int, fecha_texto.split("-"))
                            return datetime(a√±o_base, mes, dia)
                    except:
                        return pd.NaT
                    return pd.NaT
                
                # Normalizo nombres para asegurar coincidencias en ambas tablas
                cultivos_df["Nombre_cultivo"] = cultivos_df["Nombre_cultivo"].str.strip().str.lower()
                df_monocultivo["Cultivo"] = df_monocultivo["Cultivo"].str.strip().str.lower()
                
                # Convierto las columnas de fechas de siembra y cosecha a datetime para visualizaci√≥n
                cultivos_df["Fecha_siembra"] = cultivos_df["Fecha_siembra"].astype(str).str.strip()
                cultivos_df["Fecha_cosecha"] = cultivos_df["Fecha_cosecha"].astype(str).str.strip()
                cultivos_df["Fecha_siembra_dt"] = cultivos_df["Fecha_siembra"].apply(convertir_fecha)
                cultivos_df["Fecha_cosecha_dt"] = cultivos_df["Fecha_cosecha"].apply(convertir_fecha)
                
                # Filtro cultivos usados en la propuesta para construir calendario personalizado
                cultivos_usados = df_monocultivo["Cultivo"].unique()
                df_calendario = cultivos_df[cultivos_df["Nombre_cultivo"].isin(cultivos_usados)].copy()
                df_calendario = df_calendario[["Nombre_cultivo", "Fecha_siembra_dt", "Fecha_cosecha_dt"]]
                df_calendario.columns = ["Cultivo", "Inicio", "Fin"]
                df_calendario = df_calendario.dropna()
                
                # Formateo fechas para mostrar tabla legible con estilos CSS
                df_mostrar = df_calendario.copy()
                df_mostrar["Inicio"] = df_mostrar["Inicio"].dt.strftime("%d/%m")
                df_mostrar["Fin"] = df_mostrar["Fin"].dt.strftime("%d/%m")
                st.markdown("""
                    <style>
                    thead tr th {
                        background-color: #AABFA4;
                        color: #1e1e1e;
                        font-weight: bold;
                        text-align: center;
                    }
                    tbody tr td {
                        text-align: center;
                    }
                    </style>
                """, unsafe_allow_html=True)
                st.dataframe(df_mostrar, use_container_width=True)
                
                # Genero gr√°fico timeline con fechas de siembra y cosecha por cultivo
                st.markdown("### üìÖ Calendario anual de siembra y cosecha")
                if not df_calendario.empty:
                    fig = px.timeline(
                        df_calendario,
                        x_start="Inicio",
                        x_end="Fin",
                        y="Cultivo",
                        color="Cultivo",
                        title="Calendario anual Monocultivo",
                    )
                    fig.update_yaxes(autorange="reversed")
                    fig.update_layout(height=420, margin=dict(l=0, r=0, t=50, b=0))
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è No se encontraron cultivos con fechas v√°lidas para mostrar el calendario.")
                
                # Preparaci√≥n y descarga del archivo Excel con los resultados del monocultivo
                output_mono = io.BytesIO()
                nombre_archivo_mono = f"recomendacion_monocultivo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                with pd.ExcelWriter(output_mono, engine="xlsxwriter") as writer:
                    df_monocultivo.to_excel(writer, index=False, sheet_name="Monocultivo")
                
                st.download_button(
                    label="üì• Descargar resultados en Excel",
                    data=output_mono.getvalue(),
                    file_name=nombre_archivo_mono,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
                # =======================
                # Recomendaciones visuales por cultivo (tarjetas con detalles)
                # =======================
                st.markdown("## ü™¥ Recomendaciones visuales por cultivo")
                st.markdown("##### üéã Tarjetas de cultivo")
                
                # Diccionario de emojis para representar visualmente cada cultivo
                iconos_por_cultivo = {
                    "Tomate": "üçÖ", "Lechuga": "ü•¨", "Zanahoria": "ü•ï", "Cebolla": "üßÖ", "Ajo": "üßÑ", "Pimiento": "üå∂Ô∏è",
                    "Pepino": "ü•í", "Calabac√≠n": "ü•í", "Berenjena": "üçÜ", "Espinaca": "ü•¨", "Repollo": "ü•¨", "Br√≥coli": "ü•¶",
                    "Coliflor": "ü•¶", "Alcachofa": "ü•¨", "Guisante": "üå±", "Habas": "üå±", "Nabo": "üå∞", "R√°bano": "üå∞",
                    "Apio": "ü•¨", "Remolacha": "ü´í", "Jud√≠a verde": "üåø", "Escarola": "ü•¨", "Endivia": "ü•¨", "Acelga": "ü•¨",
                    "Col rizada": "ü•¨", "Pepinillo": "ü•í", "Puerro": "üßÖ", "Bledo": "üåø", "Mostaza verde": "üåø", "Berro": "üåø",
                    "Acelga de verano": "ü•¨", "Achicoria": "ü•¨", "Berza": "ü•¨", "Can√≥nigos": "ü•¨", "Cardo": "üåø",
                    "Coles de Bruselas": "ü•¨", "Mizuna": "üåø", "Pak Choi": "ü•¨", "R√∫cula": "üåø"
                }
                
                # Identifico el cultivo con mayor beneficio anual para destacarlo con una estrella
                cultivo_top = df_monocultivo.loc[df_monocultivo["Beneficio total anual (‚Ç¨)"].idxmax(), "Cultivo"]
                
                # Organizo los cultivos en filas de 4 columnas para mostrar tarjetas ordenadas
                n_col = 4
                rows = [df_monocultivo[i:i + n_col] for i in range(0, df_monocultivo.shape[0], n_col)]
                
                # Construyo cada tarjeta con informaci√≥n clave para el usuario
                for fila in rows:
                    cols = st.columns(len(fila))
                    for i, (_, row) in enumerate(fila.iterrows()):
                        cultivo = row["Cultivo"]
                        icono = iconos_por_cultivo.get(cultivo, "üåø")
                        estrella = " ‚≠ê" if cultivo == cultivo_top else ""
                        
                        with cols[i]:
                            st.markdown(f"""
                            <div style="background-color: #AABFA4; border: 3px solid #2f4030; border-radius: 16px; padding: 1.2rem; color: white; text-align: center;
                                        box-shadow: 1px 1px 6px rgba(0,0,0,0.1); height: 650px; font-family: 'Segoe UI', sans-serif;">
                            
                            <div style='font-size: 1.2rem;'>{icono}{estrella}</div>
                            <h4 style="margin: 0.5rem 0 0.8rem;">{cultivo}</h4>
                            
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Duraci√≥n del ciclo</p>
                                <p>{int(row['Duraci√≥n del ciclo (d√≠as)'])} d√≠as</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Ciclos por a√±o</p>
                                <p>{int(row['Ciclos por a√±o'])}</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Plantas estimadas</p>
                                <p>{int(row.get('Plantas estimadas', 0)):,} unidades</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Producci√≥n mensual</p>
                                <p>{row['Producci√≥n mensual promedio (kg)']:,.0f} kg</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Producci√≥n total</p>
                                <p>{row['Producci√≥n total anual (kg)']:,.0f} kg</p>
                            </div>
                            <div style="margin-bottom: 0.6rem;">
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Beneficio mensual</p>
                                <p>‚Ç¨ {row['Beneficio mensual promedio (‚Ç¨)']:,.2f}</p>
                            </div>
                            <div>
                                <p style="margin-bottom: 0.2rem; color: #2f4030; font-weight: bold;">Beneficio Anual</p>
                                <p>‚Ç¨ {row['Beneficio total anual (‚Ç¨)']:,.2f}</p>
                            </div>
                            </div>
                            """, unsafe_allow_html=True)
                    st.markdown("<br>", unsafe_allow_html=True)
                
                # =======================
                # Gr√°fico resumen final comparativo
                # =======================
                st.markdown("### üìä Comparativa visual por cultivo")
                
                resumen_mono = df_monocultivo[[
                    "Cultivo", 
                    "Producci√≥n total anual (kg)", 
                    "Beneficio total anual (‚Ç¨)", 
                ]].copy()
                
                resumen_melted = resumen_mono.melt(
                    id_vars="Cultivo", 
                    value_vars=[
                        "Producci√≥n total anual (kg)", 
                        "Beneficio total anual (‚Ç¨)", 
                    ],
                    var_name="Variable", 
                    value_name="Valor"
                )
                
                fig_resumen_mono = px.bar(
                    resumen_melted,
                    x="Cultivo",
                    y="Valor",
                    color="Variable",
                    barmode="group",
                    title=" Cultivos monocultivos"
                )
                
                fig_resumen_mono.update_layout(
                    xaxis_title="Cultivo",
                    yaxis_title="Valor",
                    height=420,
                    plot_bgcolor='#F2F7F1',      # Fondo igual que el sidebar
                    paper_bgcolor='#F2F7F1',     # Tambi√©n el lienzo externo
                    font=dict(color="#2f4030"),
                    margin=dict(l=0, r=0, t=50, b=0)
                )
                
                # Finalmente muestro el gr√°fico en Streamlit
                st.plotly_chart(fig_resumen_mono, use_container_width=True)
